#Позиционные и именованные аргументы

#Для того чтобы разобраться с *args и **kwargs, нам нужно освоить концепции позиционных
# (positional) и именованных (keyword) аргументов.
#cначала поговорим о том, чем они отличаются.
# В простейшей функции мы просто сопоставляем позиции аргументов и параметров.
# Аргумент №1 соответствует параметру №1, аргумент №2 — параметру №2 и так далее.

def printThese(a,b,c):
   print(a, "is stored in a")
   print(b, "is stored in b")
   print(c, "is stored in c")
printThese(1,2,3)
"""
1 is stored in a
2 is stored in b
3 is stored in c
"""

#Для вызова функции необходимы все три аргумента.
# Если пропустить хотя бы один из них — будет выдано сообщение об ошибке.

'''def printThese(a,b,c):
   print(a, "is stored in a")
   print(b, "is stored in b")
   print(c, "is stored in c")
printThese(1,2)'''
"""
TypeError: printThese() missing 1 required positional argument: 'c'
"""

#Если при объявлении функции назначить параметру значение по умолчанию — указывать соответствующий аргумент
# при вызове функции уже необязательно. Параметр становится опциональным.

def printThese(a,b,c=None):
   print(a, "is stored in a")
   print(b, "is stored in b")
   print(c, "is stored in c")
printThese(1,2)
"""
1 is stored in a
2 is stored in b
None is stored in c
"""

#Опциональные параметры, кроме того, можно задавать при вызове функции, используя их имена.
# В следующем примере установим три параметра в значение по умолчанию None и взглянем на то,
# как их можно назначать, используя их имена и не обращая внимания на порядок следования аргументов,
# применяемых при вызове функции.

def printThese(a=None,b=None,c=None):
   print(a, "is stored in a")
   print(b, "is stored in b")
   print(c, "is stored in c")
printThese(c=3, a=1)
"""
1 is stored in a
None is stored in b
3 is stored in c
"""

# Оператор * «звёздочка»
# Оператор * чаще всего ассоциируется у людей с операцией умножения, но в Python он имеет и другой смысл.
# он позволяет «распаковывать» объекты, внутри которых хранятся некие элементы.
# Вот пример:

a = [1,2,3]
b = [*a,4,5,6]
print(b) # [1,2,3,4,5,6]

# Тут берётся содержимое списка a, распаковывается, и помещается в список b.
#
# Как пользоваться *args и **kwargs
# Итак, мы знаем о том, что оператор «звёздочка» в Python способен «вытаскивать» из объектов составляющие их элементы.
# Знаем мы и о том, что существует два вида параметров функций.
# Вполне возможно, что вы уже додумались до этого сами, но я, на всякий случай, скажу об этом.
'''*args — это сокращение от «arguments» (аргументы), 
а **kwargs — сокращение от «keyword arguments» (именованные аргументы).'''

# Каждая из этих конструкций используется для распаковки аргументов соответствующего типа,
# позволяя вызывать функции со списком аргументов переменной длины.
# Например — создадим функцию, которая умеет выводить результаты, набранные учеником в тесте:

def printScores(student, *scores):
   print(f"Student Name: {student}")
   for score in scores:
      print(score)
printScores("Jonathan",100, 95, 88, 92, 99)
"""
Student Name: Jonathan
100
95
88
92
99
"""

# Я не использовал при объявлении функции конструкцию *args.
# Вместо неё у меня — *scores. Нет ли тут ошибки? Ошибки здесь нет.
# Дело в том, что «args» — это всего лишь набор символов, которым принято обозначать аргументы.
# Самое главное тут — это оператор *. А то, что именно идёт после него, особой роли не играет.
# Благодаря использованию * мы создали список позиционных аргументов на основе того,
# что было передано функции при вызове.
#
# После того, как мы разобрались с *args, с пониманием **kwargs проблем быть уже не должно.
# Имя, опять же, значения не имеет. Главное — это два символа **.
# Благодаря им создаётся словарь, в котором содержатся именованные аргументы, переданные функции при её вызове.

def printPetNames(owner, **pets):
   print(f"Owner Name: {owner}")
   for pet,name in pets.items():
      print(f"{pet}: {name}")
printPetNames("Jonathan", dog="Brock", fish=["Larry", "Curly", "Moe"], turtle="Shelldon")
"""
Owner Name: Jonathan
dog: Brock
fish: ['Larry', 'Curly', 'Moe']
turtle: Shelldon
"""

# Итоги
# Вот несколько советов, которые помогут вам избежать распространённых проблем,
# возникающих при работе с функциями, и расширить свои знания:
# Используйте общепринятые конструкции *args и **kwargs для захвата позиционных и именованных аргументов.
# Конструкцию **kwargs нельзя располагать до *args.
# Если это сделать — будет выдано сообщение об ошибке.
# Остерегайтесь конфликтов между именованными параметрами и **kwargs, в случаях,
# когда значение планируется передать как **kwarg-аргумент, но имя ключа этого значения
# совпадает с именем именованного параметра.
# Оператор *можно использовать не только в объявлениях функций, но и при их вызове.
print('_________________________')
def print_params(a, b, c):  # *args **kwargs
    print(a, b, c)
list_=[1, 2, 3]
print_params(*list_)
print('_________________________')

def print_params(*params,**par):  # *args **kwargs
    print(params,par)

dict_={'a': 1,'b': 2}
list_=[1, 2, 3]
print_params(list_)   # 1 2 3
print_params(*list_)  # ([1, 2, 3],) {}
print_params(*dict_)  # (1, 2, 3) {}
print_params(1,2,**dict_)          # (1, 2) {'a': 1, 'b': 2}
print_params(list_,*list_,**dict_) # ([1, 2, 3], 1, 2, 3) {'a': 1, 'b': 2}
print('_________________________')

def print_params(a,b,c):  # *args **kwargs
    print(a,b,c)

dict_={'a': 4,'b': 5,'c':6}
list_=[1, 2, 3]
print_params(**dict_) # 4,5,6
print_params(*dict_)   # a,b,c
print('_________________________')

def print_params(**kwargs):
    for key in kwargs:
        print(key)
dict_={'a': 4,'b': 5,'c':6}
print_params(**dict_)
# a
# b
# c
print('_________________________')

def print_params(**kwargs):
    for key,value in kwargs.items(): # для ключа, значения / Команда items() возвращает объект представления,
                                    # который отображает список пар кортежей словаря (ключ, значение).
        print(key,value)
dict_={'a': 4,'b': 5,'c':6}
print_params(**dict_)
#   a 4
#   b 5
#   c 6
print('_________________________')


def print_params(a, b, c):  # *args, **kwargs
    print(a, b, c)

list_ = [1, 2]      # 1 2,c
dict_ = {'c': 3}    # a,b, 3
print_params(*list_, **dict_) #1 2 3
