'''цикл while устроен довольно просто, после ключевого слова записываем условие,
 а затем какие-то команды, выполнение которых будет повторяться, пока ответом на данное условие будет «True»
 В нашем случае цикл будет повторяться бесконечно, потому что условие «1 > 0» будет всегда истинно.
 Поскольку команды выполняются последовательно, компьютер постоянно будет обрабатывать правдивость условия,
  затем выполнять строчку кода с отступом, прилегающую к этому условию, а потом опять возвращаться
   к условию и проверять его и так далее, пока условие не потеряет свою правдивость.'''
'''while 1>0:
    print("hello")'''

'''print('Нули ничто, отрицание недопустимо!')
my_list = [42, 69, 322, 13, 0, 99, -5, 9, 8, 7, -6, 5]
print(my_list)
my_list.remove(0)
print(my_list)
index = 0
while index  < len(my_list):
    print(my_list[index])
    index += 1
    if my_list[index] < 0:
        print("цикл закончен",my_list[index],"<0")
        break'''

'''____________
for работает в качестве своего рода переборщика.
 И в случае с циклом for мы сами определяем количество повторений.
 Цикл повторит команды столько раз, сколько элементов в последовательности, 
 если вывести i, то увидим перебор нашей последовательности.
  Переменная «i» на каждом повторении цикла сохраняет в себя значения из последовательности.
То есть в нашем случае на первом повторении она сохранила в себя значение «1», на втором «2» 
и т. д. пока последовательность не закончилась.'''
'''for i in 1,2,3,4:
    print("ok")'''
'''for i in 1, 2, 3, 4:
    print(i)'''
'''for i in "Hello":
    print(i)'''
'''list = ["one", "two", "three"]
for i in list:
    if i == "three":
        list.remove(i) #удалить из списка строку three
print(list)'''

'''если мы захотим пройтись по списку и изменить каждый его элемент. 
Цикл for может помочь нам и здесь. Но перебирать нам будет нужно уже не сам список, 
а числовую последовательность. Так же, как и у строк, в списках у каждого элемента 
есть свой порядковый номер, то есть индекс. Индексация, как мы помним, начинается с нуля.

Функция range возвращает нам последовательность чисел от 0 до числа, которое мы укажем в скобках. 
Например, если мы впишем в скобки число 5, то наш цикл повторится 5 раз. Если мы захотим, вывести 
переменную «i», мы увидим значения от 0 до 4. Это немного напоминает срез, поскольку здесь последний 
элемент также не входит в последовательность.
 Но по факту цикл повторится 5 раз, потому что здесь учитывается 0.'''
'''list = ["one", "two", "three"]
for i in range(5):
    print(i)
print(list)'''
'''В этой последовательности у нас сейчас больше чисел чем элементов в списке, поэтому на каком-то этапе
 мы просто наткнемся на ошибку. Чтобы этого избежать и немного оптимизировать нашу программу под любой размер
 списка, мы можем написать в скобках вместо числа функцию len. Она возвращает нам длину элемента, который мы
запишем в прилегающие к ней скобки. Мы впишем туда нашу переменную «list_» (Рис.8). Таким образом
 функция len получит от нашей переменной число 3, поскольку в списке 3 элемента, и передаст его
 функции range, которая выдаст нам последовательность от 0 до 2, что как раз и соответствует индексам списка.'''
'''list = ["one", "two", "three"]
for i in range(len(list)): # индексы 0,1,2
    print(i)
print(list)'''
'''list = ["one", "two", "three"]
for i in range(len(list)): 
    print(list[i]) #перебор значений индексов
print(list)'''
'''list = ["one", "two", "three"]
for i in range(len(list)):
    list[i]=":-)" #заменим все элементы списка смайликом
print(list)'''
'''list = ["one", "two", "three"]
for i in range(len(list)):
    list[i]=":-)" #заменим все элементы списка смайликом
print(list)'''

'''Пример со сложением элементов в списке.
 Создадим второй список «list_2» и добавим в него какие-нибудь числа. Нашей задачей будет посчитать сумму 
 всех его элементов. Здесь нам потребуется переменная, которая обязательно будет существовать вне цикла.
  Например «sum_», которая равна 0. 
  Если мы запишем ее в цикле, то на каждом повторении она всегда будет перезаписываться. 
  Теперь мы можем брать элементы из нашего списка и прибавлять их к нашей переменной.
   Запустим программу и получим 15'''
'''list_2 = [2, 3, 4, 5, 1]
sum_ = 0
for i in range(len(list_2)): # 0,1,2,3,4
    sum_ += list_2[i] # складываем все числа последовательности из списка list_2
print(sum_)
print(list_2)'''

'''ВЛОЖЕННЫЙ ЦИКЛ
с помощью цикла for вывести таблицу умножения.
Для начала создадим цикл, здесь нам также будет нужна команда range, сразу зададим, что наша таблица
 умножения будет от 1 до 11, т. к. мы помним, что последний элемент не включается.
  Единицу мы вписали, чтобы наша таблица начиналась не с 0, а с 1 
  Функция range может принимать до 3 значений. Первое – начало отсчета и второе – конец, 
  как и в нашем случае, но существует еще третье – это шаг последовательности. 
  Допустим, если мы укажем шаг два, то нам будет выводиться каждое второе число последовательности..'''
'''for i in range(1, 11, 1):  # начиная с 1го по 10 с шагом1 (По умолчанию 3я цифра,  те шаг = 1)
    for j in range(1, 11, 1):
        print(f'{i} * {j} = {i * j}') '''
'''1 * 1 = 1
1 * 2 = 2
1 * 3 = 3
1 * 4 = 4
1 * 5 = 5
1 * 6 = 6
1 * 7 = 7
1 * 8 = 8
1 * 9 = 9
1 * 10 = 10
2 * 1 = 2 ...
Сначала выполняется первая строчка и создается цикл, а переменная «i» записывает в себя первое значение – 1.
  Далее создается еще один цикл уже с переменной «j» с таким же первым значением – 1. 
  Потом идет команда print, в выражение (функция f) подставляются первые значения '''
'''Таблица умножения'''
'''for i in range(11 ):  # начиная с 0го индекса (по умолчанию) по 10ый, с шагом =1 (по умолчанию)
    for j in range(11):
        print(f'{i} * {j} = {i * j}')'''
'''Привычная нам таблица с 2 до 9'''
'''for i in range(2,10 ):  # начиная с 0го индекса (по умолчанию) по 10ый, с шагом =1 (по умолчанию)
    for j in range(2,10):
        print(f'{i} * {j} = {i * j}')
'''
'''Словари в цикле for
Цикл for может перебирать и словари. Для примера создадим какой-нибудь словарь с тремя значениями и ключами'''
'''dict_ ={"a":1,"b":2,"c":3}
for i in dict_:  # из словаря
           print(i,dict[i])'''
# a dict['a']
# b dict['b']
# c dict['c']

'''dict_ = {"a": 1, "b": 2, "c": 3}
for i in dict_:  # из словаря
    print(i, dict_[i])
# a 1
# b 2
# c 3
Здесь по уже известной нам аналогии мы проходимся по элементам словаря, а переменная «i» вбирает в себя
 значения ключей, мы можем использовать это, чтобы, например, достать само значение по указанному ключу.'''

'''тот же результат можно получить с помощью метода items(вывод пар ключ-значение)
dict_ = {"a": 1, "b": 2, "c": 3}
for i,k in dict_.items():  # из словаря
    print(i,k)
    # a 1
    # b 2
    # c 3'''

