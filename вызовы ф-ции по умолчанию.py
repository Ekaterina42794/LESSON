def print_params(a,b,c):
    print(a,b,c)
    print(a+c)

print_params() #ошибка тк не указаны параметры
print_params(True,'gdjg',1) # ошибка тк складыываем разные типы


def print_params(a=1, b=2, c='string'): # именованные после позиционных
    print(a, b, c)
print_params()

def print_params(a=1,*, b, c='string'): # b должно быть указано тк стоит *
    print(a,b,c)
print_params()
'''Способы вызова функции по умолчанию
Сегодня мы рассмотрим какими способами можно вызвать функцию и какие ошибки при этом встретить.

Для начала создадим простую функцию, которая будет принимать три параметра, например «a», «b» и «c», 
и выводить их. Как мы помним, для вызова функции нам нужно написать ее имя, открыть и закрыть скобки.
Наша функция является принимающей и принимает три параметра. Соответственно, если мы ее сейчас запустим,
то увидим такую ошибку (Рис.2). Она сообщает, что у нас пропущено три обязательных позиционных аргумента «a», «b» и «c».
То есть нам все же необходимо передать ей три каких-то значения, например 1, 2 и 3 .
yCharm здесь сам подсвечивает параметры, соответствующие введенным значениям.
Запустив программу, видим, что вывело наши значения 
При этом эти параметры могут быть вообще не связаны между собой. Они могут быть совершенно разных типов 
Но важно заметить, что если в коде будет выстроено какое-то взаимодействие, например сложение «а» и «с»,
которые принадлежат разным типам, то мы получим ошибку 
Другое дело, если мы зададим параметру «а» значение 2 типа int, как и у параметра «с». 
Тогда мы уже получим их сумму – 3 
Таким образом, если указываем, что функция принимает три параметра, то должны передать ей три значения.
Если передадим меньше, то получим ошибку (Рис.8). И если передадим больше, тоже 
Но есть ситуации, когда нам нет нужды передавать параметры. Когда они объявлены по умолчанию.
Например, если мы сразу зададим, что «а» = 1, «b» = 2 и «с» = 3 
В таком случае, даже если мы ничего не укажем в скобках, то увидим в ответе заданные нами раннее значения.
Тем не менее, если нам необходимо, то мы можем вписать в скобки значения, которые могут не соответствовать 
заданным по умолчанию (Рис.11). В таком случае в ответе мы увидим их, то есть таким образом мы можем
переопределить параметры.
Если мы запишем их по порядку, то они будут читаться позиционно. Но мы можем указать, что хотим изменить 
конкретный параметр, к примеру параметр «с» сделаем строкой . Запустим и увидим, что теперь «с» у нас строка.
Например, зададим также другие значения, которые автоматически позиционно передадутся параметрам «а» и «b» 
Таким образом, мы можем задать значения одновременно позиционным и именованным параметрам.
Важно, чтобы позиционные параметры шли перед именованными.
Если написать какие-то значения после значения именованного параметра, то увидим ошибку 
Тем не менее, если мы передаем все именованные параметры, то они могут идти не по порядку
Существует также способ конкретно указать, что параметр будет именованным.
Нужно поставить знак «*» перед этим параметром.
Например, поставим «*» перед параметром «b» . В таком случае первый параметр «а» у нас может быть позиционным,
а параметры «b» и «с» будут именованными.
То есть в данном случае мы не можем написать, что 2 будет значением позиционного параметра, мы просто получим ошибку.
Все потому, что мы поставили «*» перед двумя последними параметрами, все что идет после этого знака, 
мы должны конкретно указать.
Это правило работает и в том случае, если «*» стоит в начале перед всеми параметрами
Если мы конкретно укажем их значения, то увидим ответ '''